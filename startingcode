import React, { useState } from 'react';
import { Plus, Search, Filter, Sun, Cloud, Umbrella } from 'lucide-react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';

/**
 * SmartWardrobe Component
 * A digital wardrobe management system that helps users organize and view their clothing items
 * Features include: category filtering, search functionality, and weather indicators
 */
const SmartWardrobe = () => {
  // State for tracking which category tab is currently selected
  const [activeTab, setActiveTab] = useState('all');
  // State for storing the current search query
  const [searchQuery, setSearchQuery] = useState('');
  
  // Sample wardrobe data - in a real app this would be fetched from a database
  // Each item has properties like category, color, suitable weather conditions, and formality level
  const [items] = useState([
    { 
      id: 1, 
      name: 'Blue Oxford Shirt', 
      category: 'tops', 
      color: 'blue', 
      weather: ['sunny', 'cloudy'], 
      formality: 'business-casual' 
    },
    { 
      id: 2, 
      name: 'Black Dress Pants', 
      category: 'bottoms', 
      color: 'black', 
      weather: ['any'], 
      formality: 'formal' 
    },
    { 
      id: 3, 
      name: 'Rain Jacket', 
      category: 'outerwear', 
      color: 'yellow', 
      weather: ['rainy'], 
      formality: 'casual' 
    },
  ]);

  // Available category options for filtering
  const categories = ['all', 'tops', 'bottoms', 'outerwear', 'shoes', 'accessories'];
  
  // Filter items based on active category tab and search query
  const filteredItems = items.filter(item => 
    // Show all items if 'all' is selected, otherwise filter by category
    (activeTab === 'all' || item.category === activeTab) &&
    // Filter by search query if one exists
    (searchQuery === '' || item.name.toLowerCase().includes(searchQuery.toLowerCase()))
  );

  return (
    // Main container with responsive width and padding
    <div className="w-full max-w-4xl mx-auto p-4">
      <Card>
        {/* Header section with title and add item button */}
        <CardHeader>
          <CardTitle className="flex justify-between items-center">
            <span>AI Smart Wardrobe</span>
            {/* Add new item button */}
            <button className="p-2 rounded-full bg-blue-500 text-white">
              <Plus className="h-6 w-6" />
            </button>
          </CardTitle>
        </CardHeader>

        <CardContent>
          {/* Search bar and weather indicators section */}
          <div className="flex justify-between items-center mb-6">
            {/* Search input with icon */}
            <div className="relative flex-1 max-w-sm">
              <Search className="absolute left-2 top-2.5 h-4 w-4 text-gray-400" />
              <input
                type="text"
                placeholder="Search your wardrobe..."
                className="pl-8 pr-4 py-2 w-full border rounded-md"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
              />
            </div>
            {/* Weather condition indicators */}
            <div className="flex gap-2">
              <Sun className="h-6 w-6 text-yellow-500" /> {/* Sunny weather */}
              <Cloud className="h-6 w-6 text-gray-400" /> {/* Cloudy weather */}
              <Umbrella className="h-6 w-6 text-blue-500" /> {/* Rainy weather */}
            </div>
          </div>

          {/* Category filter tabs */}
          <div className="flex gap-2 mb-6 overflow-x-auto">
            {categories.map(category => (
              <button
                key={category}
                className={`px-4 py-2 rounded-full ${
                  // Highlight active category tab
                  activeTab === category
                    ? 'bg-blue-500 text-white'
                    : 'bg-gray-100 text-gray-700'
                }`}
                onClick={() => setActiveTab(category)}
              >
                {/* Capitalize first letter of category name */}
                {category.charAt(0).toUpperCase() + category.slice(1)}
              </button>
            ))}
          </div>

          {/* Grid display of clothing items */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {filteredItems.map(item => (
              <Card key={item.id} className="p-4">
                {/* Item image placeholder */}
                <div className="aspect-square bg-gray-100 rounded-md mb-2 flex items-center justify-center">
                  <img
                    src="/api/placeholder/200/200"
                    alt={item.name}
                    className="object-cover rounded-md"
                  />
                </div>
                {/* Item details */}
                <h3 className="font-medium">{item.name}</h3>
                <p className="text-sm text-gray-500">{item.category}</p>
              </Card>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default SmartWardrobe;
